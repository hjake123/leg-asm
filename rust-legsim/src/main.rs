/// A simulator for my Turing Complete game's LEG (EX) architecture.
/// This consumes a file of line-broken integer 'machine code' and runs it as an executable.
/// Code files are the ones generated by legasm.py.
/// 
/// Specification date: 12/24/2023
/// 
/// Options are documented in --help, and commands are documented in the 'help' command.
/// Keep in mind to set the text mode on or off properly, as many programs assume text mode.
/// 
/// All instructions take exactly one cycle, which is very nearly true in the game as well.

use clap::Parser;
use rust_legsim::Machine;
use std::fs;
use std::io;
use std::io::Write;

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
struct Args {
    /// The program file name to run.
    program: String,

    /// Whether to show debug output each cycle.
    #[arg(short, long)]
    debug: bool
}

fn main() {
    let args = Args::parse();

    let file_name = args.program;

    println!("Simulating {file_name}:");

    let mut machine = Machine::load(&fs::read_to_string(&file_name).expect("Couldn't read the file."));

    if args.debug {
        println!("{machine}");
        let mut _buf = String::new();
        let _ = io::stdin().read_line(&mut _buf);
    }

    while machine.cycle() {
        let _ = io::stdout().flush();
        if args.debug {
            println!("{machine}");
            let mut _buf = String::new();
            let _ = io::stdin().read_line(&mut _buf);
        }
    }

    println!("Halted.")
}